>>> fabric-contract-api
npm run lint && npm run test:unit && npm run test:schema 

> fabric-contract-api@2.0.0-snapshot lint /w/workspace/fabric-chaincode-node-merge-x86_64/gopath/src/github.com/hyperledger/fabric-chaincode-node/apis/fabric-contract-api
> eslint ./lib/


> fabric-contract-api@2.0.0-snapshot test:unit /w/workspace/fabric-chaincode-node-merge-x86_64/gopath/src/github.com/hyperledger/fabric-chaincode-node/apis/fabric-contract-api
> npm run test


> fabric-contract-api@2.0.0-snapshot test /w/workspace/fabric-chaincode-node-merge-x86_64/gopath/src/github.com/hyperledger/fabric-chaincode-node/apis/fabric-contract-api
> nyc mocha --recursive 'test/unit/**/*.js'



  Default.js
    Default
2019-10-10T11:57:20.974Z info [c-api:./lib/annotations/default.js]                @Default args: "Target ->","mockTarget" 
      ✓ should add set value for default when none set
2019-10-10T11:57:20.984Z info [c-api:./lib/annotations/default.js]                @Default args: "Target ->","mockTarget" 
      ✓ should error when default already set

  Info.js
    Info
2019-10-10T11:57:20.987Z info [c-api:./lib/annotations/info.js]                   @Info args: "Info -> [object Object],","Target ->","steve" 
      ✓ should add object as key when no objects exist for global yet
2019-10-10T11:57:20.989Z info [c-api:./lib/annotations/info.js]                   @Info args: "Info -> [object Object],","Target ->","steve" 
      ✓ should add object as key when objects exist for global
    Info with data
2019-10-10T11:57:20.991Z info [c-api:./lib/annotations/info.js]                   @Info args: "Info -> [object Object],","Target ->","steve" 
      ✓ should add object as key when no objects exist for global yet
2019-10-10T11:57:20.992Z info [c-api:./lib/annotations/info.js]                   @Info args: "Info -> [object Object],","Target ->","steve" 
      ✓ should add object as key when objects exist for global

  Object.js
    #Object
2019-10-10T11:57:20.995Z info [c-api:./lib/annotations/object.js]                 @Object args: "Target ->","steve" 
      ✓ should add object as key when no objects exist for global yet
2019-10-10T11:57:20.997Z info [c-api:./lib/annotations/object.js]                 @Object args: "Target ->","steve" 
      ✓ should add object as key when objects exist for global
    #Property
2019-10-10T11:57:20.999Z info [c-api:./lib/annotations/object.js]                 @Property args: "Property Key -> undefined, Name -> some name, Type -> SoMe tYPe,","Target ->","Object" 
      ✓ should use the type and name passed
2019-10-10T11:57:21.001Z info [c-api:./lib/annotations/object.js]                 @Property args: "Property Key -> some key, Name -> some name, Type -> undefined,","Target ->","Object" 
      ✓ should handle the reflected type being a function when type not passed and is function
2019-10-10T11:57:21.003Z info [c-api:./lib/annotations/object.js]                 @Property args: "Property Key -> some key, Name -> undefined, Type -> undefined,","Target ->","Object" 
      ✓ should handle the reflected type being a function when type not passed and is not function

  Transaction.js
    Transaction
2019-10-10T11:57:21.007Z info [c-api:./lib/annotations/transaction.js]            @Transaction args: "Property Key -> mockKey, Commit -> true,","Target ->","Object" 
      ✓ should handle existing transactions
2019-10-10T11:57:21.011Z info [c-api:./lib/annotations/transaction.js]            @Transaction args: "Property Key -> mockKey, Commit -> true,","Target ->","Object" 
      ✓ should error if missing type
2019-10-10T11:57:21.014Z info [c-api:./lib/annotations/transaction.js]            @Transaction args: "Property Key -> mockKey, Commit -> true,","Target ->","Object" 
      ✓ should handle existing transactions of which matches name and already has param metadata
2019-10-10T11:57:21.017Z info [c-api:./lib/annotations/transaction.js]            @Transaction args: "Property Key -> mockKey, Commit -> true,","Target ->","Object" 
      ✓ should create new metadata for fabric:transactions if none exist and handle no params
2019-10-10T11:57:21.022Z info [c-api:./lib/annotations/transaction.js]            @Transaction args: "Property Key -> mockKey, Commit -> false,","Target ->","Object" 
      ✓ should not add a tag if commit is false
    Returns
2019-10-10T11:57:21.024Z info [c-api:./lib/annotations/transaction.js]            @Returns args: ", Property Key -> mockKey, Return Type -> someType,","Target ->","Object" 
      ✓ should handle existing transactions
2019-10-10T11:57:21.027Z info [c-api:./lib/annotations/transaction.js]            @Returns args: ", Property Key -> mockKey, Return Type -> someType,","Target ->","Object" 
      ✓ should handle when there are no existing transactions
    Param
2019-10-10T11:57:21.033Z info [c-api:./lib/annotations/transaction.js]            @Param args: "Property Key -> mockKey, Param Name -> some param, Param Type -> some type, Description -> some description,","Target ->","Object" 
      ✓ should overwrite when the transaction exists and param of name already in
2019-10-10T11:57:21.037Z info [c-api:./lib/annotations/transaction.js]            @Param args: "Property Key -> mockKey, Param Name -> some param, Param Type -> some type, Description -> some description,","Target ->","Object" 
      ✓ should overwrite existing transaction but add new param when one with name does not exist
2019-10-10T11:57:21.039Z info [c-api:./lib/annotations/transaction.js]            @Param args: "Property Key -> mockKey, Param Name -> some param, Param Type -> some type, Description -> some description,","Target ->","Object" 
      ✓ should append to transaction a new parameters array when transaction exists but has not parameters field
2019-10-10T11:57:21.042Z info [c-api:./lib/annotations/transaction.js]            @Param args: "Property Key -> mockKey, Param Name -> some param, Param Type -> some type, Description -> some description,","Target ->","Object" 
      ✓ should handle when no transaction exists
2019-10-10T11:57:21.044Z info [c-api:./lib/annotations/transaction.js]            @Param args: "Property Key -> mockKey, Param Name -> some param, Param Type -> some type, Description -> undefined,","Target ->","Object" 
      ✓ should handle when no description passed

  utils
    appendOrUpdate
      ✓ should push a new object into array made up of data passed if none existing with id
      ✓ should update existing object with data if id exists
    findByValue
      ✓ should return the element in the array with the passed value in the passed field
      ✓ should return null if no element has the passed value for the passed field
    generateSchema
      ✓ should return a primitive type
      ✓ should return a primitive type as lowercase
      ✓ should return a ref path for a non array and non primitive type
      ✓ should return a ref path for a non array and non primitive type and not use full path
      ✓ should recurse for array types
      ✓ should recurse for map types

  contract.js
    #constructor
      ✓ should create plain object ok
      ✓ should have set* methods

  contract.js
    #constructor
2019-10-10T11:57:21.055Z info [c-api:./lib/contract.js]                           Creating new Contract  
2019-10-10T11:57:21.055Z info [c-api:./lib/contract.js]                           Creating new Contract "" 
2019-10-10T11:57:21.055Z info [c-api:./lib/contract.js]                           Creating new Contract "  " 
      ✓ should create with default name
2019-10-10T11:57:21.056Z info [c-api:./lib/contract.js]                           Creating new Contract  
2019-10-10T11:57:21.056Z error [c-api:./lib/contract.js]                          [some id] Contract contract-api.Contract unknown transaction "wibble", 
      ✓ should have default unknownTx fn
2019-10-10T11:57:21.058Z info [c-api:./lib/contract.js]                           Creating new Contract "brain.size.planet.smart" 
2019-10-10T11:57:21.059Z info [c-api:./lib/contract.js]                           Creating new Contract "   somewhat.padded.out " 
2019-10-10T11:57:21.059Z info [c-api:./lib/contract.js]                           Creating new Contract  
      ✓ should create with the name specified
2019-10-10T11:57:21.060Z info [c-api:./lib/contract.js]                           Creating new Contract  
      ✓ should call the default before/after functions
2019-10-10T11:57:21.061Z info [c-api:./lib/contract.js]                           Creating new Contract  
      ✓ should call the default createContext functions
2019-10-10T11:57:21.061Z info [c-api:./lib/contract.js]                           Creating new Contract  
      ✓ should set the __isContract value
    _isContract
2019-10-10T11:57:21.063Z info [c-api:./lib/contract.js]                           Creating new Contract "alpha.beta.delta" 
      ✓ should return true when class is a contract
      ✓ should return true when class is not a contract
      ✓ should return true when class is not instanceOf contract but does have __isContract true
    subclass specific functioning
2019-10-10T11:57:21.065Z info [c-api:./lib/contract.js]                           Creating new Contract "alpha.beta.delta" 
      ✓ should set the correct name
2019-10-10T11:57:21.067Z info [c-api:./lib/contract.js]                           Creating new Contract "alpha.beta.delta" 
      ✓ should call the correct subclassed fns

  jsontransactionserializer.js
    #constructor
      ✓ should create plain object ok
    #toBuffer
      ✓ should return undefined if nothing passed in (no schema) 
2019-10-10T11:57:21.069Z info [c-api:./lib/jsontransactionserializer.js]          undefined toBuffer has no schema/lacks sufficient schema to validate against {} 
2019-10-10T11:57:21.070Z info [c-api:./lib/jsontransactionserializer.js]          undefined toBuffer has no schema/lacks sufficient schema to validate against {} 
2019-10-10T11:57:21.070Z info [c-api:./lib/jsontransactionserializer.js]          undefined toBuffer has no schema/lacks sufficient schema to validate against {} 
2019-10-10T11:57:21.070Z info [c-api:./lib/jsontransactionserializer.js]          undefined toBuffer has no schema/lacks sufficient schema to validate against {} 
      ✓ should return stringifed result (no schema)
      ✓ should return string from a string in result if schema given
      ✓ should return number from a number in result if schema given
2019-10-10T11:57:21.072Z error [c-api:./lib/jsontransactionserializer.js]         undefined toBuffer validation against schema failed on type "number","string" 
      ✓ should throw an error if the type of data passed does not match schema given
2019-10-10T11:57:21.072Z info [c-api:./lib/jsontransactionserializer.js]          undefined toBuffer has no schema/lacks sufficient schema to validate against {} 
2019-10-10T11:57:21.073Z info [c-api:./lib/jsontransactionserializer.js]          undefined toBuffer has no schema/lacks sufficient schema to validate against {} 
      ✓ should handle booleans
    #fromBuffer
2019-10-10T11:57:21.074Z error [c-api:./lib/jsontransactionserializer.js]         undefined fromBuffer no data supplied  
      ✓ should throw an error if nothing given
      ✓ should throw an error if not a number
      ✓ should throw an error if bad boolean given
      ✓ should throw an error if bad JSON used for non string or number type
      ✓ should return inflated data from the buffer
      ✓ should handle specific String case
      ✓ should handle specific Number case
      ✓ should handle specific Number case
      ✓ should handle booleans
2019-10-10T11:57:21.082Z error [c-api:./lib/jsontransactionserializer.js]         fromBuffer could not convert data to useful type {"type":"Buffer","data":[123,34,116,121,112,101,34,58,34,119,104,97,116,101,118,101,114,34,125]} 
      ✓ should handle errors of unkown type

  Logger
    ✓ coverage
2019-10-10T11:57:21.085Z error [c-api:_]                                          Unhandled Rejection reason __PERMITTED__ promise Promise { <rejected> '__PERMITTED__' }  
    getLogger
      ✓ should create a new logger name unknown
      ✓ should return existing logger if known name used
      ✓ should set the log level to fatal when env var set to CRITICAL
      ✓ should set the log level to error when env var set to ERROR
      ✓ should set the log level to warn when env var set to WARNING
      ✓ should set the log level to debug when env var set to DEBUG
    setLevel
      ✓ should update the loggers to be the level passed in
    formatter
      ✓ anonymous logger
      ✓ named logger


  73 passing (150ms)


=============================== Coverage summary ===============================
Statements   : 100% ( 288/288 )
Branches     : 100% ( 135/135 )
Functions    : 100% ( 52/52 )
Lines        : 100% ( 285/285 )
================================================================================

> fabric-contract-api@2.0.0-snapshot test:schema /w/workspace/fabric-chaincode-node-merge-x86_64/gopath/src/github.com/hyperledger/fabric-chaincode-node/apis/fabric-contract-api
> ajv compile -s ./schema/contract-schema.json && ajv validate -s ./schema/contract-schema.json -d ./schema/example-full.json

schema ./schema/contract-schema.json is valid
./schema/example-full.json valid
